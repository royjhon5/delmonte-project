const textFieldRef = useRef(null);
const textFieldSubRef = useRef(null);
const [folderName, setFolderName] = useState('');
const [subfolderName, setSubFolderName] = useState('');
const queryClient = useQueryClient();
const [selectedHeaderId, setSelectedHeaderId] = useState(null);  
const [createFolder, setCreateFolder] = useState(false);
const [createSubFolder, setCreateSubFolder] = useState(false);
  
  const CreateFolder = () => setCreateFolder(true);
  const HandleBlur = () => setCreateFolder(false);
  const HandleSubBlur = () => setCreateSubFolder(false);

  useEffect(() => {
    if (createFolder && textFieldRef.current) {
      textFieldRef.current.focus();
    } else if (createSubFolder && textFieldSubRef.current) {
      textFieldSubRef.current.focus();
    }
  }, [createFolder, createSubFolder]);


  //SAVING NEW HEADER HERE
  // ---------------------
  //----------------------

  const saveNewFolder = async  () => {
    const CashvoucherData = { 
      folder_name: folderName,
			user_id_link: accessToken.userID,
    };
    try {
      await saveNewFolderEntry.mutateAsync(CashvoucherData);
    } catch (error) {
      console.error('Error saving cash voucher:', error);
      toast.error('Failed to save cash voucher.');
    }
  };
  const saveNewFolderEntry = useMutation({
    mutationFn: (CashvoucherData) => http.post('/save-my-portal-folder', CashvoucherData),
    onSuccess: () => {
      queryClient.invalidateQueries(['treeHeader']);
      setFolderName('');
      setCreateFolder(false);
    },
    onError: (error) => {
      toast.error(error)
    }
  });

  const SaveDataFolder = (event) => {
    if(event.key === 'Enter'){
      saveNewFolder();
    }
  }

  const handleHeaderChange = (newLabel, item) => {
    updateHeaderName.mutate({
      label: newLabel,
      id: item.id,
    });
  };

  const updateHeaderName = useMutation({
    mutationFn: (updateHeader) => {
      return http.post('/save-my-portal-folder', {
        id: updateHeader.id,
        folder_name: updateHeader.label,
        user_id_link: accessToken.userID
      }, {
        headers: {
          'Content-Type': 'application/json'
        }
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries(['treeHeader']);
    },
    onError: (error) => {
      toast.error('Failed to update folder name.');
      console.error('Error updating folder name:', error);
    }
  });

  // -------------- ENDS HERE ---------------- //

  // ------- SAVING SUB FOLDER HERE----------- //

  const SaveSubFolder = (event) => {
    if(event.key === 'Enter'){
      saveNewSubFolder();
    }
  }

  const handleItemSelectionToggle = (event, itemId, isSelected) => {
    if (isSelected) {
      setSelectedHeaderId(itemId);
      setCreateSubFolder(true);
    }
  };
  

  const saveNewSubFolder = async  () => {
    const subFolder = { 
      id_link: selectedHeaderId,
			sub_folder_name: subfolderName,
    };
    try {
      await saveSubFolder.mutateAsync(subFolder);
    } catch (error) {
      console.error('Error saving cash voucher:', error);
      toast.error('Failed to save cash voucher.');
    }
  };
  const saveSubFolder = useMutation({
    mutationFn: (subFolder) => http.post('/save-my-portal-subfolder', subFolder),
    onSuccess: () => {
      queryClient.invalidateQueries(['treeHeader']);
      setSubFolderName('');
      setCreateSubFolder(false);
    },
    onError: (error) => {
      toast.error(error)
    }
  });